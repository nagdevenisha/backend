// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fullname  String
  username  String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
}

model RadioPerCity {
  id    Int    @id @default(autoincrement())
  city  String
  radio String
}

model Team {
  id                Int              @id @default(autoincrement())
  city              String
  station           String
  leadName          String
  teamName          String
  dateofCreation    DateTime         @default(now())
  pendingtask       Int              @default(0)
  completedtask     Int              @default(0)
  totalassignedtask Int              @default(0)
  members           Member[]
  tasks             Task[]
  teamDailyStats    TeamDailyStats[]
}

model Member {
  id     Int    @id @default(autoincrement())
  name   String
  teamId Int
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks  Task[]
}

model Task {
  id           Int      @id @default(autoincrement())
  assignto     String
  audio        String[]
  instructions String?
  status       String   @default("pending") // could be pending, completed, etc.
  createdAt    DateTime @default(now())
  teamId       Int
  team         Team     @relation(fields: [teamId], references: [id])
  memberId     Int
  member       Member   @relation(fields: [memberId], references: [id])
}

model TeamDailyStats {
  id       Int      @id @default(autoincrement())
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   Int
  date     DateTime
  assigned Int      @default(0)

  @@unique([teamId, date])
}
model AudioFingerprint {
  id          Int      @id @default(autoincrement())
  fileName    String
  filePath    String
  duration    Float
  fingerprint String
  createdAt   DateTime @default(now())
}
model Recording {
  id          Int     @id @default(autoincrement())
  fileName    String   // camelCase
  filePath    String
  duration    Int
  fingerprint String
}
model MatchResult {
  id         Int      @id @default(autoincrement())
  recordingId Int?    // optional link to uploaded recording
  jsonData   Json
  createdAt  DateTime @default(now())
}
